{"ast":null,"code":"import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n      this.isRefreshing = false;\n    }\n    intercept(request, next) {\n      const token = this.authService.getAuthToken();\n      if (token) {\n        request = this.addToken(request, token);\n      }\n      // Mock authentication for demo purposes\n      if (request.url.includes('/api/auth/login')) {\n        return this.handleMockLogin(request);\n      }\n      return next.handle(request).pipe(catchError(error => {\n        if (error.status === 401 && !request.url.includes('/auth/refresh')) {\n          return this.handle401Error(request, next);\n        }\n        return throwError(() => error);\n      }));\n    }\n    handleMockLogin(request) {\n      const body = request.body;\n      const mockUsers = {\n        'admin@usvi.com': {\n          id: 1,\n          email: 'admin@usvi.com',\n          role: 'admin',\n          name: 'Admin User'\n        },\n        'analyst@usvi.com': {\n          id: 2,\n          email: 'analyst@usvi.com',\n          role: 'analyst',\n          name: 'Analyst User'\n        },\n        'evaluator@usvi.com': {\n          id: 3,\n          email: 'evaluator@usvi.com',\n          role: 'evaluator',\n          name: 'Evaluator User'\n        },\n        'cityuser@usvi.com': {\n          id: 4,\n          email: 'cityuser@usvi.com',\n          role: 'city-user',\n          name: 'City User'\n        }\n      };\n      const mockTokens = {\n        'admin@usvi.com': 'mock-jwt-token-admin',\n        'analyst@usvi.com': 'mock-jwt-token-analyst',\n        'evaluator@usvi.com': 'mock-jwt-token-evaluator',\n        'cityuser@usvi.com': 'mock-jwt-token-cityuser'\n      };\n      const user = mockUsers[body.email];\n      if (user && body.password === 'password') {\n        const token = mockTokens[body.email];\n        const response = {\n          token,\n          user\n        };\n        // Simulate successful login\n        this.authService.setToken(token);\n        this.authService.setStoredUser(user);\n        this.authService.currentUserSubject.next(user);\n        return of(new HttpResponse({\n          body: response\n        }));\n      }\n      return throwError(() => new HttpErrorResponse({\n        status: 401,\n        error: {\n          message: 'Invalid credentials'\n        }\n      }));\n    }\n    addToken(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    handle401Error(request, next) {\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        return this.authService.refreshToken().pipe(switchMap(response => {\n          this.isRefreshing = false;\n          return next.handle(this.addToken(request, response.token));\n        }), catchError(error => {\n          this.isRefreshing = false;\n          this.authService.logout();\n          return throwError(() => error);\n        }));\n      }\n      return next.handle(request);\n    }\n    static {\n      this.ɵfac = function AuthInterceptor_Factory(t) {\n        return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthInterceptor,\n        factory: AuthInterceptor.ɵfac\n      });\n    }\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}