{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.tokenKey = 'auth_token';\n      this.userKey = 'current_user';\n      this.loadStoredUser();\n    }\n    loadStoredUser() {\n      const token = this.getToken();\n      const user = this.getStoredUser();\n      if (token && user) {\n        this.currentUserSubject.next(user);\n      }\n    }\n    login(credentials) {\n      // For demo purposes, using mock service\n      // Replace with your actual API endpoint: this.http.post<LoginResponse>('/api/auth/login', credentials)\n      return this.http.post('/api/auth/login', credentials).pipe(tap(response => {\n        this.setToken(response.token);\n        this.setStoredUser(response.user);\n        this.currentUserSubject.next(response.user);\n      }), catchError(error => {\n        console.error('Login error:', error);\n        return throwError(() => error);\n      }));\n    }\n    logout() {\n      this.removeToken();\n      this.removeStoredUser();\n      this.currentUserSubject.next(null);\n      this.router.navigate(['/auth/login']);\n    }\n    isAuthenticated() {\n      const token = this.getToken();\n      return !!token && !this.isTokenExpired(token);\n    }\n    getUserRole() {\n      const user = this.currentUserSubject.value;\n      const role = user?.role || '';\n      console.log('Getting user role:', role); // Debug log\n      return role;\n    }\n    getCurrentUser() {\n      const user = this.currentUserSubject.value;\n      console.log('Getting current user:', user); // Debug log\n      return user;\n    }\n    refreshToken() {\n      return this.http.post('/api/auth/refresh', {}).pipe(tap(response => {\n        this.setToken(response.token);\n      }), catchError(error => {\n        this.logout();\n        return throwError(() => error);\n      }));\n    }\n    setToken(token) {\n      localStorage.setItem(this.tokenKey, token);\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    removeToken() {\n      localStorage.removeItem(this.tokenKey);\n    }\n    setStoredUser(user) {\n      localStorage.setItem(this.userKey, JSON.stringify(user));\n    }\n    getStoredUser() {\n      const userStr = localStorage.getItem(this.userKey);\n      return userStr ? JSON.parse(userStr) : null;\n    }\n    removeStoredUser() {\n      localStorage.removeItem(this.userKey);\n    }\n    isTokenExpired(token) {\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        return payload.exp * 1000 < Date.now();\n      } catch {\n        return true;\n      }\n    }\n    // Get token for HTTP requests\n    getAuthToken() {\n      return this.getToken();\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}